{"version":3,"sources":["components/context.ts","components/DataProvider.tsx","components/LockProvider.tsx","slate-screen/draw.ts","slate-screen/checked.ts","slate-screen/fourline.ts","slate-screen/singleline.ts","slate-screen/twoline.ts","slate-screen/SlateScreenManager.ts","components/const.ts","components/useWindowSize.tsx","components/useDevice.tsx","components/Canvas.tsx","components/ui/Eraser.tsx","components/canvasutils.ts","const.ts","components/ui/Container.tsx","components/ColorPicker.tsx","components/settings/BrushSize.tsx","components/settings/Portal.tsx","components/settings/SettingsDialogue.tsx","components/settings/Settings.tsx","components/Toolbar.tsx","components/MainPage.tsx","components/SettingProvider.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["LockContext","React","createContext","SlateDataContext","SettingContext","DataProvider","guid","children","useState","data","setData","loadDataFlag","setLoadDataFlag","useEffect","Provider","value","slatePattern","loadData","renderData","toggleRender","LockProvider","islocked","lockStatus","setLockStatus","setIsLocked","status","toggleLock","drawLine","ctx","start","end","color","yFactor","beginPath","moveTo","x","y","lineTo","strokeStyle","lineWidth","stroke","closePath","getChecked","lineCount","initialY","lineHeight","screenWidth","screenHeight","xCount","getXCount","yCount","getYCount","index","Math","floor","getFourLine","getSingleLine","getTwoLine","drawSlateScreen","slateScreenType","SlateScreenType","FOURLINE","count","constructFourLineSlate","TWOLINE","constructTwoLineSlate","SINGLELINE","constructSingleLineSlate","CHECKED","constructCheckedSlate","screenSize","useWindowSize","SCREENSIZE","width","undefined","height","windowSize","setWindowSize","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useDevice","MOBILE","device","setDevice","DEKTOP","LAPTOP","TABLET","getEraser","brushSize","canvas","document","createElement","style","border","radius","console","log","context","getContext","fillStyle","fillRect","dataURL","toDataURL","body","cursor","Canvas","clearScreenAction","pageCanvasRef","useRef","pageContextRef","canvasRef","contextRef","isDrawing","setDrawing","isClearing","setClearing","setScreenHeight","setScreenWidth","getLineHeight","clearToggle","useContext","brushColor","setColor","clearSlateScreen","useCallback","current","canvasCtx","clearRect","offsetHeight","getElementById","offsetWidth","pageCanvas","pageContext","startDrawing","nativeEvent","offsetX","offsetY","stopDrawing","pattern","draw","forEach","p","f","drawing","storeData","display","flexDirection","justifyContent","alignItems","id","position","ref","zIndex","onMouseDown","e","onMouseUp","onMouseMove","onTouchStart","touch","touches","mouseEvent","MouseEvent","clientX","clientY","onTouchEnd","onTouchMove","mobileS","mobileM","mobileL","tablet","laptop","laptopL","desktop","desktopL","ContainerDiv","styled","div","props","compType","bgColor","SizedBox","CardAction","fontSize","ColorPicker","setBrushColor","icon","faPalette","size","htmlFor","type","onChange","target","trim","borderRadius","padding","backgroundColor","BrushSize","setbrushSize","faPaintBrush","min","max","parseInt","step","modalRoot","Portal","el","appendChild","this","removeChild","ReactDOM","createPortal","Component","ModalContainerDiv","SettingsDialogue","close","className","borderBottom","onClick","Settings","isOpen","setIsOpen","buttonRef","createRef","faCog","Toolbar","changeSlateScreenType","screenIcon","slateType","clearScreen","flexFlow","faUndoAlt","toLocaleLowerCase","onDoubleClick","faEraser","faLockOpen","faLock","MainPage","trigger","setClearTrigger","SKETCH","setSlateType","setscreenIcon","faPencilRuler","faGripLines","faTable","state","SettingProvider","initialColor","App","fallback","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","render","StrictMode","URL","process","href","origin","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.fd040070.chunk.js","sourcesContent":["import React from \"react\";\n\ntype LockContextType = { islocked: boolean; setIsLocked: Function; toggleLock: Function }\nexport type SlateData = {\n  x: number;\n  y: number;\n};\nexport type SlatePattern = {\n  pattern: Array<SlateData>;\n  strokeStyle?: string | CanvasGradient | CanvasPattern;\n  lineWidth?: number;\n}\n\ntype DataContextType = { slatePattern: Array<SlatePattern>, loadData: Function, renderData: boolean, toggleRender: Function }\ntype SettingContextType = { brushColor: string, setBrushColor: Function }\n\nexport const LockContext = React.createContext({} as LockContextType);\nexport const SlateDataContext = React.createContext({} as DataContextType);\n\nexport const SettingContext = React.createContext({} as SettingContextType);","import React from \"react\";\nimport { SlateDataContext, SlatePattern } from \"./context\";\n\ntype DataProviderProps = {\n  guid?: string;\n};\n\nconst DataProvider: React.FC<DataProviderProps> = ({ guid, children }) => {\n  const [data, setData] = React.useState([] as Array<SlatePattern>);\n  const [loadDataFlag, setLoadDataFlag] = React.useState<boolean>(false);\n\n  const toggleRender = () => {\n    setLoadDataFlag(!loadDataFlag);\n  };\n\n  React.useEffect(() => {\n    // getdata using guid\n    setData([] as Array<SlatePattern>);\n  }, [guid]);\n\n  const loadData = (slatePattern: SlatePattern) => {\n    setData([...data, slatePattern]);\n  };\n  return (\n    <SlateDataContext.Provider\n      value={{\n        slatePattern: data,\n        loadData,\n        renderData: loadDataFlag,\n        toggleRender,\n      }}\n    >\n      {children}\n    </SlateDataContext.Provider>\n  );\n};\n\nexport default DataProvider;\n","import React from \"react\";\nimport { LockContext } from \"./context\";\ntype LockProviderProps = {\n  islocked?: boolean;\n};\n\nconst LockProvider: React.FC<LockProviderProps> = ({ islocked, children }) => {\n  const [lockStatus, setLockStatus] = React.useState<boolean>(\n    islocked || false\n  );\n  const setIsLocked = (status: boolean) => {\n    setLockStatus(status);\n  };\n  const toggleLock = () => {\n    setLockStatus(!lockStatus);\n  };\n  return (\n    <LockContext.Provider\n      value={{ islocked: lockStatus, setIsLocked, toggleLock }}\n    >\n      {children}\n    </LockContext.Provider>\n  );\n};\n\nexport default LockProvider;\n","export  const drawLine = (\n    ctx: any,\n    start: any,\n    end: any,\n    color: string,\n    yFactor: number\n  ) => {\n    ctx.beginPath();\n    ctx.moveTo(start.x, start.y);\n    ctx.lineTo(end.x, end.y);\n    ctx.strokeStyle = color;\n    ctx.lineWidth = 1;\n    ctx.stroke();\n    ctx.closePath();\n  };","import { drawLine } from \"./draw\";\n\nexport const getChecked = (\n    ctx: any,\n    lineCount: number,\n    yFactor: number,\n    initialY: number,\n    lineHeight: number,\n    screenWidth: number,\n    screenHeight: number\n) => {\n    if (ctx) {\n        const xCount = getXCount(screenHeight, initialY, lineHeight);\n        const yCount = getYCount(screenWidth, initialY, lineHeight);\n        for (let index = 1; index <= 1; index++) {\n            let start = yFactor + lineHeight * index;\n            let color = \"grey\";\n            if (lineCount < xCount) {\n                drawLine(ctx, { x: 0, y: start }, { x: screenWidth, y: start }, color, yFactor);\n            }\n            if (lineCount < yCount) {\n                color = \"grey\";\n                drawLine(ctx, { x: start, y: 0 }, { x: start, y: screenHeight }, color, yFactor);\n            }\n        }\n    }\n};\n\nexport const constructCheckedSlate = (\n    ctx: any,\n    initialY: number,\n    lineHeight: number,\n    screenWidth: number,\n    screenHeight: number\n) => {\n    lineHeight = 100;\n    const xCount = getXCount(screenWidth, initialY, lineHeight);\n    const yCount = getYCount(screenHeight, initialY, lineHeight);\n    for (let index = 0; index < xCount || index < yCount; index++) {\n        const yFactor = index * lineHeight;\n        getChecked(ctx, index, yFactor, initialY, lineHeight, screenWidth, screenHeight);\n    }\n};\nfunction getYCount(screenHeight: number, initialY: number, lineHeight: number) {\n    return Math.floor((screenHeight) / (lineHeight));\n}\n\nfunction getXCount(screenWidth: number, initialY: number, lineHeight: number) {\n    return Math.floor((screenWidth) / (lineHeight));\n}\n\n","import { drawLine } from \"./draw\";\n\nexport const getFourLine = (\n    ctx: any,\n    yFactor: number,\n    initialY: number,\n    lineHeight: number,\n    screenWidth: number\n) => {\n    if (ctx) {\n        for (let index = 1; index <= 5; index++) {\n            let y = initialY + yFactor * 4.5 + lineHeight * index;\n            let color = \"blue\";\n            if (index === 2 || index === 3) {\n                color = \"red\";\n            } else if (index === 5) {\n                color = \"transparent\";\n                y = y - (lineHeight * 0.5)\n            }\n            drawLine(ctx, { x: 0, y: y }, { x: screenWidth, y: y }, color, yFactor);\n        }\n    }\n};\n\nexport const constructFourLineSlate = (\n    ctx: any,\n    initialY: number,\n    lineHeight: number,\n    screenWidth: number,\n    screenHeight: number\n) => {\n    const count = Math.floor((screenHeight - initialY) / (lineHeight * 4.5));\n    for (let index = 0; index < count; index++) {\n        const yFactor = index * lineHeight;\n        getFourLine(ctx, yFactor, initialY, lineHeight, screenWidth);\n    }\n};\n","import { drawLine } from \"./draw\";\n\nexport const getSingleLine = (\n    ctx: any,\n    yFactor: number,\n    initialY: number,\n    lineHeight: number,\n    screenWidth: number\n) => {\n    if (ctx) {\n        for (let index = 1; index <= 1; index++) {\n            let y = initialY + yFactor + lineHeight * index;\n            let color = \"blue\";\n            drawLine(ctx, { x: 0, y: y }, { x: screenWidth, y: y }, color, yFactor);\n        }\n    }\n};\n\nexport const constructSingleLineSlate = (\n    ctx: any,\n    initialY: number,\n    lineHeight: number,\n    screenWidth: number,\n    screenHeight: number\n) => {\n    const count = Math.floor((screenHeight - initialY) / (lineHeight));\n    for (let index = 0; index < count; index++) {\n        const yFactor = index * lineHeight;\n        getSingleLine(ctx, yFactor, initialY, lineHeight, screenWidth);\n    }\n};\n","import { drawLine } from \"./draw\";\n\nexport const getTwoLine = (\n    ctx: any,\n    yFactor: number,\n    initialY: number,\n    lineHeight: number,\n    screenWidth: number\n) => {\n    if (ctx) {\n        for (let index = 1; index <= 3; index++) {\n            let y = initialY + yFactor * 2.5 + lineHeight * index;\n            let color = \"grey\";\n            if (index === 3) {\n                color = \"transparent\";\n                y = y - (lineHeight * 0.5)\n            }\n            drawLine(ctx, { x: 0, y: y }, { x: screenWidth, y: y }, color, yFactor);\n        }\n    }\n};\n\nexport const constructTwoLineSlate = (\n    ctx: any,\n    initialY: number,\n    lineHeight: number,\n    screenWidth: number,\n    screenHeight: number\n) => {\n    const count = Math.floor((screenHeight - initialY) / (lineHeight * 2.5));\n    for (let index = 0; index < count; index++) {\n        const yFactor = index * lineHeight;\n        getTwoLine(ctx, yFactor, initialY, lineHeight, screenWidth);\n    }\n};\n","import { SlateScreenType } from \"../components/Canvas\";\nimport { constructCheckedSlate } from \"./checked\";\nimport { constructFourLineSlate } from \"./fourline\";\nimport { constructSingleLineSlate } from \"./singleline\";\nimport { constructTwoLineSlate } from \"./twoline\";\n\n\nexport const drawSlateScreen = (ctx: CanvasRenderingContext2D | null, slateScreenType: SlateScreenType, initialY: number,\n    lineHeight: number,\n    screenWidth: number,\n    screenHeight: number) => {\n    if (ctx) {\n        if (slateScreenType === SlateScreenType.FOURLINE) {\n            constructFourLineSlate(\n                ctx,\n                initialY,\n                lineHeight,\n                screenWidth,\n                screenHeight\n            );\n        } else if (slateScreenType === SlateScreenType.TWOLINE) {\n            constructTwoLineSlate(\n                ctx,\n                initialY,\n                lineHeight,\n                screenWidth,\n                screenHeight\n            );\n        } else if (slateScreenType === SlateScreenType.SINGLELINE) {\n            constructSingleLineSlate(\n                ctx,\n                initialY,\n                lineHeight,\n                screenWidth,\n                screenHeight\n            );\n        } else if (slateScreenType === SlateScreenType.CHECKED) {\n            constructCheckedSlate(\n                ctx,\n                initialY,\n                lineHeight,\n                screenWidth,\n                screenHeight\n            );\n        }\n    }\n};","export const screenSize = {\n    mobileS: 320,\n    mobileM: 375,\n    mobileL: 425,\n    tablet: 768,\n    laptop: 1024,\n    laptopL: 1440,\n    desktop: 2560\n  }","import React from \"react\";\n\n// Define general type for useWindowSize hook, which includes width and height\ninterface Size {\n  width: number | undefined;\n  height: number | undefined;\n}\n// Hook\nfunction useWindowSize(): Size {\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const [windowSize, setWindowSize] = React.useState<Size>({\n    width: undefined,\n    height: undefined,\n  });\n  React.useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n    // Add event listener\n    window.addEventListener(\"resize\", handleResize);\n    // Call handler right away so state gets updated with initial window size\n    handleResize();\n    // Remove event listener on cleanup\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n  return windowSize;\n}\n\nexport default useWindowSize;\n","import React from \"react\";\nimport { screenSize } from \"./const\";\nimport useWindowSize from \"./useWindowSize\";\n\nexport enum SCREENSIZE {\n  MOBILE,\n  TABLET,\n  LAPTOP,\n  DEKTOP,\n}\n\nconst useDevice = (): SCREENSIZE => {\n  const windowSize = useWindowSize();\n  const [device, setDevice] = React.useState<SCREENSIZE>(SCREENSIZE.MOBILE);\n  React.useEffect(() => {\n    if (windowSize.width && windowSize.width >= screenSize.desktop) {\n      setDevice(SCREENSIZE.DEKTOP);\n    } else if (windowSize.width && windowSize.width >= screenSize.laptop) {\n      setDevice(SCREENSIZE.LAPTOP);\n    } else if (windowSize.width && windowSize.width >= screenSize.tablet) {\n      setDevice(SCREENSIZE.TABLET);\n    }\n  }, [windowSize]);\n\n  return device;\n};\n\nexport default useDevice;\n","import React, { useCallback } from \"react\";\nimport { drawSlateScreen } from \"../slate-screen/SlateScreenManager\";\nimport { getLineHeight } from \"./canvasutils\";\nimport {\n  LockContext,\n  SettingContext,\n  SlateData,\n  SlateDataContext,\n} from \"./context\";\nimport getEraser, { clearEraser } from \"./ui/Eraser\";\nimport useDevice from \"./useDevice\";\n\nexport enum SlateScreenType {\n  MATHS,\n  TAMIL,\n  ENGLISH,\n  SKETCH,\n  FOURLINE,\n  TWOLINE,\n  SINGLELINE,\n  CHECKED,\n}\ntype CanvasProps = {\n  clearScreenAction: boolean;\n  brushSize: number;\n  slateScreenType: SlateScreenType;\n};\n\nconst Canvas: React.FC<CanvasProps> = ({\n  clearScreenAction,\n  brushSize,\n  slateScreenType,\n}) => {\n  const pageCanvasRef = React.useRef<HTMLCanvasElement>(null);\n  const pageContextRef = React.useRef<CanvasRenderingContext2D | null>(null);\n  const canvasRef = React.useRef<HTMLCanvasElement>(null);\n  const contextRef = React.useRef<CanvasRenderingContext2D | null>(null);\n  // const [] = React.useState(slateScreenType);\n  const [isDrawing, setDrawing] = React.useState(false);\n  const [isClearing, setClearing] = React.useState(false);\n  const [data, setData] = React.useState([] as Array<SlateData>);\n\n  const [screenHeight, setScreenHeight] = React.useState(\n    window.innerHeight - 50\n  );\n  const device = useDevice();\n  const [screenWidth, setScreenWidth] = React.useState(window.innerWidth - 50);\n  const [lineHeight] = React.useState(getLineHeight(device));\n  const [clearToggle] = React.useState(false);\n  const { islocked } = React.useContext(LockContext);\n  const { brushColor } = React.useContext(SettingContext);\n  const [color, setColor] = React.useState(brushColor);\n\n  React.useEffect(() => {}, [brushColor]);\n  const { renderData, slatePattern, loadData } =\n    React.useContext(SlateDataContext);\n  const clearSlateScreen = React.useCallback(() => {\n    let ctx = pageContextRef.current;\n    let canvasCtx = pageCanvasRef.current;\n    if (ctx) {\n      if (canvasCtx) {\n        ctx.clearRect(0, 0, screenWidth, screenHeight);\n      }\n    }\n  }, [screenHeight, screenWidth]);\n\n  React.useEffect(() => {\n    var offsetHeight = document?.getElementById(\"myDiv\")?.offsetHeight;\n    var offsetWidth = document?.getElementById(\"myDiv\")?.offsetWidth;\n    offsetHeight && setScreenHeight(offsetHeight);\n    offsetWidth && setScreenWidth(offsetWidth);\n  }, []);\n\n  React.useEffect(() => {\n    if (\n      canvasRef &&\n      canvasRef.current &&\n      pageCanvasRef &&\n      pageCanvasRef.current\n    ) {\n      const canvas: HTMLCanvasElement = canvasRef.current;\n      const pageCanvas: HTMLCanvasElement = pageCanvasRef.current;\n      canvas.width = screenWidth;\n      canvas.height = screenHeight;\n      pageCanvas.width = screenWidth;\n      pageCanvas.height = screenHeight;\n      //   canvas.style.height = `${screenHeight * 2}px`;\n      //   canvas.style.width = `${screenWidth * 2}px`;\n      // canvas.style.height = \"800px\";\n      // canvas.style.width = \"800px\";\n      const context = canvas.getContext(\"2d\");\n      const pageContext = pageCanvas.getContext(\"2d\");\n      if (context && pageContext) {\n        // context?.scale(2, 2);\n        context.strokeStyle = \"black\";\n        context.lineWidth = brushSize;\n        contextRef.current = context;\n        pageContext.strokeStyle = \"black\";\n        pageContext.lineWidth = brushSize;\n        pageContextRef.current = pageContext;\n      }\n    }\n  }, [screenWidth, screenHeight, brushSize]);\n  React.useEffect(() => {\n    if (!islocked) {\n      const initialY = lineHeight * 0.75;\n      let ctx = pageContextRef.current;\n      if (ctx) {\n        clearSlateScreen();\n        drawSlateScreen(\n          ctx,\n          slateScreenType,\n          initialY,\n          lineHeight,\n          screenWidth,\n          screenHeight\n        );\n      }\n    }\n  }, [\n    slateScreenType,\n    screenHeight,\n    screenWidth,\n    clearToggle,\n    islocked,\n    lineHeight,\n    clearSlateScreen,\n  ]);\n\n  React.useEffect(() => {\n    console.log(\"isDrawing\", isDrawing);\n  }, [isDrawing]);\n\n  React.useEffect(() => {\n    // !islocked && clearScreen();\n    console.log(\"clearScreenAction\", clearScreenAction);\n    if (!islocked) {\n      // setColor(clearScreenAction ? \"#f8f9fa\" : brushColor);\n      setColor(brushColor);\n      clearScreenAction ? getEraser(brushSize) : clearEraser();\n      // remove the data\n    }\n  }, [brushColor, clearScreenAction, slateScreenType, brushSize, islocked]);\n  const startDrawing = (nativeEvent: any) => {\n    const { offsetX, offsetY } = nativeEvent;\n    let ctx = contextRef.current;\n    if (ctx) {\n      if (clearScreenAction) {\n        ctx.clearRect(offsetX, offsetY + 7, 25, 25);\n        setClearing(true);\n      } else {\n        ctx.beginPath();\n        ctx.moveTo(offsetX, offsetY);\n        setDrawing(true);\n        setData([]);\n      }\n    }\n  };\n  const stopDrawing = () => {\n    let ctx = contextRef.current;\n    if (ctx) {\n      if (!clearScreenAction) {\n        ctx.closePath();\n        loadData({\n          pattern: data,\n          strokeStyle: ctx?.strokeStyle,\n          lineWidth: ctx?.lineWidth,\n        });\n        setDrawing(false);\n      }\n      setClearing(false);\n    }\n  };\n\n  const draw = useCallback(\n    (\n      x: number,\n      y: number,\n      strokeStyle: string | CanvasGradient | CanvasPattern,\n      lineWidth: number\n    ) => {\n      let ctx = contextRef.current;\n      if (ctx) {\n        if (clearScreenAction) {\n          ctx.clearRect(x, y + 7, 25, 25);\n        } else {\n          ctx.lineTo(x, y);\n          ctx.strokeStyle = strokeStyle;\n          ctx.lineWidth = lineWidth;\n          ctx.stroke();\n        }\n      }\n    },\n    [clearScreenAction]\n  );\n\n  React.useEffect(() => {\n    slatePattern.forEach((p) => {\n      let ctx = contextRef.current;\n      if (ctx) {\n        ctx.beginPath();\n        p.pattern.forEach((f) =>\n          draw(f.x, f.y, p?.strokeStyle || color, p.lineWidth || brushSize)\n        );\n        ctx.closePath();\n      }\n    });\n  }, [brushSize, color, draw, renderData, slatePattern]);\n\n  const storeData = (nativeEvent: any) => {\n    const { offsetX, offsetY } = nativeEvent;\n    setData([...data, { x: offsetX, y: offsetY }]);\n    // loadData({ x: offsetX, y: offsetY });\n  };\n\n  const drawing = (nativeEvent: any) => {\n    if (!isDrawing && !isClearing) return;\n    const { offsetX, offsetY } = nativeEvent;\n    draw(offsetX, offsetY, color, brushSize);\n    isDrawing && storeData(nativeEvent);\n  };\n\n  return (\n    <>\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          height: \"100%\",\n          width: \"100%\",\n        }}\n      >\n        <div\n          id=\"myDiv\"\n          style={{\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            border: \"1px solid grey\",\n            height: `${window.innerHeight - 100}px`,\n            width: `${window.innerWidth - 10}px`,\n          }}\n        >\n          <div id=\"canvasesdiv\" style={{ position: \"relative\" }}>\n            <canvas\n              ref={pageCanvasRef}\n              style={{\n                zIndex: 1,\n                position: \"absolute\",\n                height: `${window.innerHeight - 110}px`,\n                width: `${window.innerWidth - 10}px`,\n              }}\n            ></canvas>\n            <canvas\n              style={{\n                zIndex: 2,\n                position: \"absolute\",\n                height: `${window.innerHeight - 110}px`,\n                width: `${window.innerWidth - 10}px`,\n              }}\n              onMouseDown={(e) => {\n                !islocked && startDrawing(e.nativeEvent);\n              }}\n              onMouseUp={() => {\n                !islocked && stopDrawing();\n              }}\n              onMouseMove={(e) => {\n                !islocked && drawing(e.nativeEvent);\n              }}\n              onTouchStart={(e) => {\n                var touch = e.touches[0];\n                var mouseEvent = new MouseEvent(\"mousedown\", {\n                  clientX: touch.clientX - 10,\n                  clientY: touch.clientY - 50,\n                });\n                !islocked && startDrawing(mouseEvent);\n              }}\n              onTouchEnd={() => {\n                !islocked && stopDrawing();\n              }}\n              onTouchMove={(e) => {\n                var touch = e.touches[0];\n                var mouseEvent = new MouseEvent(\"mousemove\", {\n                  clientX: touch.clientX - 10,\n                  clientY: touch.clientY - 50,\n                });\n                !islocked && drawing(mouseEvent);\n              }}\n              ref={canvasRef}\n            ></canvas>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Canvas;\n","const getEraser = (brushSize: number) => {\n  var canvas = document.createElement(\"canvas\");\n  //   canvas.setAttribute(\"width\", \"50\");\n  //   canvas.setAttribute(\"height\", \"50\");\n  canvas.style.border = \"1px solid red\";\n\n  // Width and height of canvas can\n  // be varied depending on the\n  // size of icon\n  const radius = 2 * brushSize + 10;\n\n  canvas.width = 50;\n  canvas.height = 50;\n  //   const centerX = canvas.width / 2;\n  //   const centerY = canvas.height / 2;\n\n  console.log({\n    brushSize,\n    radius,\n    width: canvas.width,\n    height: canvas.height,\n  });\n\n  // Set interval for allowing the\n  // font awesome icon to load\n  var context = canvas.getContext(\"2d\");\n  if (context) {\n    // context.beginPath();\n    // context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\n    context.fillStyle = \"#9e9e9e\";\n    context.fillRect(0, 0, 25, 25);\n    // context.fill();\n    // context.lineWidth = 5;\n    // context.strokeStyle = \"#ffffff\";\n    // context.stroke();\n\n    // Converting the canvas to image\n    var dataURL = canvas.toDataURL(\"image/png\");\n\n    // Setting the cursor property\n    // to the image created\n\n    //   @ts-ignore\n    document.body.style.cursor = \"url(\" + dataURL + \"), auto\";\n  }\n};\nexport const clearEraser = () => {\n  //   @ts-ignore\n  document.body.style.cursor = \"default\";\n};\nexport default getEraser;\n","import { SCREENSIZE } from \"./useDevice\";\n\nexport const getLineHeight = (device: SCREENSIZE) => {\n  if (device === SCREENSIZE.MOBILE) {\n    return 40;\n  }\n  return 35;\n};\n","// export const API_BASE_URL = \"http://localhost:8080\";\nexport const API_BASE_URL = \"https://gmsadai-onlineservice-v1.herokuapp.com\";\n\n\nexport const screenSize = {\n    mobileS: 320,\n    mobileM: 375,\n    mobileL: 425,\n    tablet: 768,\n    laptop: 1024,\n    laptopL: 1440,\n    desktop: 2560\n  }\n\n  export const device = {\n    mobileS: `(min-width: ${screenSize.mobileS}px)`,\n    mobileM: `(min-width: ${screenSize.mobileM}px)`,\n    mobileL: `(min-width: ${screenSize.mobileL}px)`,\n    tablet: `(min-width: ${screenSize.tablet}px)`,\n    laptop: `(min-width: ${screenSize.laptop}px)`,\n    laptopL: `(min-width: ${screenSize.laptopL}px)`,\n    desktop: `(min-width: ${screenSize.desktop}px)`,\n    desktopL: `(min-width: ${screenSize.desktop}px)`\n  };\n\n  export type CustomStyleProps = {\n    bgColor?: string;\n    cellsize?: string;\n    height?: string;\n    width?: string;\n    border?: string;\n    compType?: string;\n    fontSize?: number;\n  };\n  ","import styled from \"styled-components\";\n\nexport type CustomStyleProps = {\n  bgColor?: string;\n  cellsize?: string;\n  height?: string;\n  width?: string;\n  border?: string;\n  compType?: string;\n  fontSize?: number;\n};\n\nexport const ContainerDiv = styled.div`\n  display: flex;\n  width: ${(props: CustomStyleProps) => props.width || \"100%\"};\n  height: ${(props: CustomStyleProps) => props.height || \"100%\"};\n  flex-direction: ${(props: CustomStyleProps) => props.compType || \"row\"};\n  border: ${(props: CustomStyleProps) => props.border || \"1px solid #f3cdc1\"};\n  background-color: ${(props: CustomStyleProps) =>\n    props.bgColor || \"transparent\"};\n`;\n\nexport const SizedBox = styled.div<CustomStyleProps>`\n  height: ${(props: CustomStyleProps) => props.height || \"100%\"};\n  width: ${(props: CustomStyleProps) => props.width || \"100%\"};\n`;\n\nexport const CardAction = styled(ContainerDiv)<CustomStyleProps>`\n  justify-content: flex-end;\n  align-items: center;\n  margin-right: 10px;\n  font-size: ${(props: CustomStyleProps) =>\n    props.fontSize ? `${props.fontSize * 0.6}px` : \"15px\"};\n  border: none;\n`;\n","import { faPalette } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport { SettingContext } from \"./context\";\nimport { ContainerDiv } from \"./ui/Container\";\n\nconst ColorPicker = () => {\n  const { brushColor, setBrushColor } = React.useContext(SettingContext);\n\n  const changeColor = (e: any) => {\n    if (e.target.value && e.target.value.trim() !== \"rgba(0, 0, 0, 0)\")\n      setBrushColor(e.target.value);\n  };\n  return (\n    <>\n      <ContainerDiv\n        border=\"none\"\n        style={{\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          height: \"100%\",\n        }}\n      >\n        <ContainerDiv\n          style={{\n            display: \"flex\",\n            justifyContent: \"flex-start\",\n            alignItems: \"center\",\n            border: \"none\",\n            width: \"40%\",\n          }}\n        >\n          <FontAwesomeIcon icon={faPalette} size=\"sm\" color=\"#e91e63\" />\n          <div style={{ width: \"10px\" }}></div>\n          <label htmlFor=\"\"> Color Picker </label>\n        </ContainerDiv>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"flex-start\",\n            alignItems: \"center\",\n            height: \"100%\",\n            width: \"60%\",\n          }}\n        >\n          <label\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n            }}\n          >\n            <input type=\"color\" value={brushColor} onChange={changeColor} />\n            <div style={{ width: \"10px\" }}></div>\n            <div\n              style={{\n                fontSize: \"0.875rem\",\n                borderRadius: \"25px\",\n                padding: \"0.25rem 0.5rem\",\n                border: \"1px solid grey\",\n                color: \"white\",\n                backgroundColor: `${brushColor}`,\n              }}\n            >\n              {brushColor}\n            </div>\n          </label>\n        </div>\n      </ContainerDiv>\n    </>\n  );\n};\n\nexport default ColorPicker;\n","import { faPaintBrush } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport { ContainerDiv } from \"../ui/Container\";\n\ntype BrushSizeProps = {\n  brushSize: number;\n  setbrushSize: any;\n};\n\nconst BrushSize: React.FunctionComponent<BrushSizeProps> = (props) => {\n  const { brushSize, setbrushSize } = props;\n  return (\n    <ContainerDiv\n      border=\"none\"\n      style={{\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        height: \"100%\",\n      }}\n    >\n      <ContainerDiv\n        style={{\n          display: \"flex\",\n          justifyContent: \"flex-start\",\n          alignItems: \"center\",\n          border: \"none\",\n          width: \"40%\",\n        }}\n      >\n        <FontAwesomeIcon icon={faPaintBrush} size=\"sm\" color=\"#0d6efd\" />\n        <div style={{ width: \"10px\" }}></div>\n        <label htmlFor=\"\"> Brush Size </label>\n      </ContainerDiv>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"flex-start\",\n          alignItems: \"center\",\n          height: \"100%\",\n          width: \"60%\",\n        }}\n      >\n        <label\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n          }}\n        >\n          <input\n            style={{ width: \"100px\" }}\n            width=\"30\"\n            id=\"typeinp\"\n            type=\"range\"\n            min=\"1\"\n            max=\"25\"\n            value={brushSize}\n            onChange={(e) => {\n              setbrushSize(parseInt(e.target.value) || 1);\n            }}\n            step=\"1\"\n          />\n          <div style={{ width: \"10px\" }}></div>\n          <div\n            style={{\n              fontSize: \"0.875rem\",\n              borderRadius: \"25px\",\n              padding: \"0.25rem 0.5rem\",\n              border: \"1px solid grey\",\n              color: \"white\",\n              backgroundColor: \"grey\",\n            }}\n          >\n            {`${brushSize > 9 ? brushSize : \"0\" + brushSize}`}\n          </div>\n        </label>\n      </div>\n    </ContainerDiv>\n  );\n};\n\nexport default BrushSize;\n","import { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nconst modalRoot = document.getElementById(\"modal-root\");\n\nexport default class Portal extends Component {\n  el: HTMLDivElement;\n  constructor(props: any) {\n    super(props);\n    this.el = document.createElement(\"div\");\n  }\n  componentDidMount() {\n    // The portal element is inserted in the DOM tree after\n    // the Modal's children are mounted, meaning that children\n    // will be mounted on a detached DOM node. If a child\n    // component requires to be attached to the DOM tree\n    // immediately when mounted, for example to measure a\n    // DOM node, or uses 'autoFocus' in a descendant, add\n    // state to Modal and only render the children when Modal\n    // is inserted in the DOM tree.\n    modalRoot?.appendChild(this.el);\n  }\n\n  componentWillUnmount() {\n    modalRoot?.removeChild(this.el);\n  }\n\n  render() {\n    return ReactDOM.createPortal(this.props.children, this.el);\n  }\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { device } from \"../../const\";\nimport ColorPicker from \"../ColorPicker\";\nimport { CardAction, ContainerDiv, SizedBox } from \"../ui/Container\";\nimport BrushSize from \"./BrushSize\";\nimport Portal from \"./Portal\";\nexport type ModalDialogProps = {\n  close: any;\n  brushSize: number;\n  setbrushSize: any;\n};\n\nexport const ModalContainerDiv = styled(ContainerDiv)`\n  justify-content: center;\n  align-items: center;\n  border: none;\n  @media ${device.mobileS} {\n    width: 85%;\n    height: auto;\n  }\n  @media ${device.tablet} {\n    width: 65%;\n    height: auto;\n  }\n  @media ${device.laptop} {\n    width: 45%;\n  }\n\n  @media ${device.desktop} {\n    flex-basis: 30%;\n  }\n`;\n\nconst SettingsDialogue: React.FunctionComponent<ModalDialogProps> = (props) => {\n  const { close, brushSize, setbrushSize } = props;\n  return (\n    <>\n      <Portal>\n        <div className=\"modal\">\n          <ModalContainerDiv\n            compType=\"column\"\n            bgColor=\"white\"\n            height=\"35%\"\n            style={{\n              borderRadius: \"10px\",\n              backgroundColor: \"white\",\n              padding: \"5px\",\n            }}\n          >\n            <SizedBox height=\"5px\" />\n            <ContainerDiv\n              border=\"none\"\n              style={{\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                height: \"50px\",\n                borderBottom: \"1px solid brown\",\n              }}\n              compType=\"column\"\n            >\n              <h3> Settings </h3>\n            </ContainerDiv>\n            <SizedBox height=\"5px\" />\n\n            <ContainerDiv\n              border=\"none\"\n              style={{\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                height: \"50px\",\n              }}\n            >\n              <BrushSize brushSize={brushSize} setbrushSize={setbrushSize} />\n            </ContainerDiv>\n            <SizedBox height=\"5px\" />\n            <ContainerDiv\n              border=\"none\"\n              style={{\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                height: \"50px\",\n              }}\n            >\n              <ColorPicker />\n            </ContainerDiv>\n\n            <CardAction\n              height=\"60px\"\n              style={{\n                justifyContent: \"center\",\n              }}\n            >\n              <button\n                type=\"button\"\n                onClick={close}\n                className=\"btn btn-danger btn-sm\"\n              >\n                Close\n              </button>\n            </CardAction>\n          </ModalContainerDiv>\n        </div>\n      </Portal>\n    </>\n  );\n};\n\nexport default SettingsDialogue;\n","import { faCog } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport useDevice, { SCREENSIZE } from \"../useDevice\";\nimport SettingsDialogue from \"./SettingsDialogue\";\n\nexport type SettingsProps = {\n  brushSize: number;\n  setbrushSize: any;\n};\nconst Settings: React.FunctionComponent<SettingsProps> = (props) => {\n  const { brushSize, setbrushSize } = props;\n  const [isOpen, setIsOpen] = React.useState(false);\n  const buttonRef: React.RefObject<HTMLButtonElement> = React.createRef();\n  const device = useDevice();\n  return (\n    <>\n      <button\n        ref={buttonRef}\n        style={{\n          borderRadius: `${device !== SCREENSIZE.MOBILE ? \"25px\" : \"50px\"}`,\n          border: \"1px solid grey\",\n        }}\n        onClick={() => setIsOpen(!isOpen)}\n        className=\"btn btn-default btn-sm\"\n      >\n        <FontAwesomeIcon icon={faCog} size=\"sm\" color=\"#e91e63\" />\n        {device !== SCREENSIZE.MOBILE && <>{\" Settings\"}</>}\n      </button>\n      {isOpen && (\n        <SettingsDialogue\n          brushSize={brushSize}\n          setbrushSize={setbrushSize}\n          close={() => {\n            setIsOpen(false);\n          }}\n        ></SettingsDialogue>\n      )}\n    </>\n  );\n};\n\nexport default Settings;\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport { LockContext, SlateDataContext } from \"./context\";\nimport {\n  faEraser,\n  faLock,\n  faLockOpen,\n  faUndoAlt,\n  IconDefinition,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport useDevice, { SCREENSIZE } from \"./useDevice\";\nimport { SlateScreenType } from \"./Canvas\";\nimport Settings from \"./settings/Settings\";\n\nexport type ScreenIconType = {\n  icon: IconDefinition;\n  color: string;\n};\n\ntype ToolbarProps = {\n  changeSlateScreenType: Function;\n  brushSize: number;\n  setbrushSize: any;\n  screenIcon: ScreenIconType;\n  slateType: SlateScreenType;\n  clearScreen: any;\n};\n\nconst Toolbar: React.FC<ToolbarProps> = ({\n  changeSlateScreenType,\n  screenIcon,\n  brushSize,\n  slateType,\n  setbrushSize,\n  clearScreen,\n}) => {\n  const { islocked, toggleLock } = React.useContext(LockContext);\n  const { toggleRender } = React.useContext(SlateDataContext);\n\n  const device = useDevice();\n  const lockSlate = () => {\n    toggleLock();\n  };\n  const loadData = () => {\n    !islocked && toggleRender();\n  };\n  return (\n    <>\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          height: \"100%\",\n          width: \"100%\",\n        }}\n      >\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            border: \"1px solid grey\",\n            width: `${window.innerWidth - 10}px`,\n          }}\n        >\n          <div\n            style={{\n              display: \"flex\",\n              flexFlow: \"row wrap\",\n              justifyContent: \"space-between\",\n              alignItems: \"center\",\n              // border: \"1px solid grey\",\n              width: `${window.innerWidth - 10}px`,\n              height: \"45px\",\n            }}\n          >\n            <div\n              style={{\n                width: \"10px\",\n              }}\n            ></div>\n            {/* <ColorPicker /> */}\n            <Settings brushSize={brushSize} setbrushSize={setbrushSize} />\n            <div style={{ width: \"10px\" }}></div>\n            <div>\n              <button\n                style={{ borderRadius: \"25px\", border: \"1px solid grey\" }}\n                className=\"btn btn-default btn-sm initialLower\"\n                type=\"button\"\n                onClick={loadData}\n              >\n                <FontAwesomeIcon icon={faUndoAlt} size={\"sm\"} />\n                {device !== SCREENSIZE.MOBILE && <> Load Session Data </>}\n              </button>\n            </div>\n            <div style={{ width: \"10px\" }}></div>\n            <div>\n              <button\n                style={{ borderRadius: \"25px\" }}\n                className=\"btn btn-warning btn-sm initialLower\"\n                type=\"button\"\n                onClick={() => {\n                  !islocked && changeSlateScreenType();\n                }}\n              >\n                <FontAwesomeIcon\n                  icon={screenIcon.icon}\n                  size={\"sm\"}\n                  color={screenIcon.color}\n                />\n                <>{` ${SlateScreenType[slateType].toLocaleLowerCase()}`} </>\n                {/* {device !== SCREENSIZE.MOBILE && (\n                  <>{` ${SlateScreenType[slateType].toLocaleLowerCase()}`} </>\n                )} */}\n              </button>\n            </div>\n            <div style={{ width: \"10px\" }}></div>\n            <div>\n              <button\n                style={{ borderRadius: \"25px\", border: \"1px solid grey\" }}\n                className=\"btn btn-default btn-sm\"\n                type=\"button\"\n                onDoubleClick={() => clearScreen(2)}\n                onClick={() => clearScreen(1)}\n              >\n                <FontAwesomeIcon icon={faEraser} size={\"sm\"} color={\"red\"} />\n                {device !== SCREENSIZE.MOBILE && <> Clear </>}\n              </button>\n            </div>\n            <div\n              style={{\n                width: \"10px\",\n              }}\n            ></div>\n            <div>\n              <button\n                style={{ borderRadius: \"25px\" }}\n                className=\"btn btn-info btn-sm\"\n                type=\"button\"\n                onClick={lockSlate}\n              >\n                <FontAwesomeIcon\n                  icon={islocked ? faLockOpen : faLock}\n                  size={\"sm\"}\n                />\n                {device !== SCREENSIZE.MOBILE && (\n                  <>{islocked ? \" UnLock\" : \" Lock\"} </>\n                )}\n              </button>\n            </div>\n            <div\n              style={{\n                width: \"10px\",\n              }}\n            ></div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Toolbar;\n","import {\n  faGripLines,\n  faPaintBrush,\n  faPencilRuler,\n  faTable,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport React from \"react\";\nimport Canvas, { SlateScreenType } from \"./Canvas\";\nimport { LockContext } from \"./context\";\nimport Toolbar, { ScreenIconType } from \"./Toolbar\";\n\nconst MainPage = () => {\n  const [trigger, setClearTrigger] = React.useState(false);\n  const [brushSize, setbrushSize] = React.useState(1);\n  const [slateType, setSlateType] = React.useState(SlateScreenType.SKETCH);\n  const [screenIcon, setscreenIcon] = React.useState<ScreenIconType>({\n    icon: faPaintBrush,\n    color: \"red\",\n  });\n  const { islocked } = React.useContext(LockContext);\n  const clearScreen = (state: number) => {\n    if (state === 2) {\n      setClearTrigger(!trigger);\n    } else if (state === 1) {\n      // add transparent brush to erase\n      setClearTrigger(!trigger);\n    }\n  };\n  const changeSlateScreenType = () => {\n    //   default sketch -> english\n    if (slateType === SlateScreenType.SKETCH) {\n      setSlateType(SlateScreenType.FOURLINE);\n      setscreenIcon({ icon: faPencilRuler, color: \"#6f42c1\" });\n      //   #0dcaf0\n    } else if (slateType === SlateScreenType.FOURLINE) {\n      setSlateType(SlateScreenType.TWOLINE);\n      setscreenIcon({\n        icon: faGripLines,\n        color: \"grey\",\n      });\n    } else if (slateType === SlateScreenType.TWOLINE) {\n      setSlateType(SlateScreenType.SINGLELINE);\n      setscreenIcon({\n        icon: faPaintBrush,\n        color: \"blue\",\n      });\n    } else if (slateType === SlateScreenType.SINGLELINE) {\n      setSlateType(SlateScreenType.CHECKED);\n      setscreenIcon({\n        icon: faTable,\n        color: \"grey\",\n      });\n    } else if (slateType === SlateScreenType.CHECKED) {\n      setSlateType(SlateScreenType.SKETCH);\n      setscreenIcon({\n        icon: faPaintBrush,\n        color: \"red\",\n      });\n    } else {\n      setSlateType(SlateScreenType.SKETCH);\n      setscreenIcon({\n        icon: faPaintBrush,\n        color: \"red\",\n      });\n    }\n  };\n  return (\n    <>\n      <div\n        style={{\n          height: \"50px\",\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n        }}\n      >\n        <div\n          style={{\n            display: \"flex\",\n          }}\n        >\n          <div style={{ width: \"10px\" }}></div>\n          <h3 style={{ color: \"#6610f2\" }}>Web Slate</h3>\n        </div>\n        <div\n          style={{\n            display: \"flex\",\n          }}\n        >\n          <span\n            style={{\n              backgroundColor: \"red\",\n              color: \"white\",\n              padding: \"0 10px\",\n            }}\n          >\n            {islocked && \"Locked\"}\n          </span>\n          <div style={{ width: \"10px\" }}></div>\n        </div>\n      </div>\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"center\",\n          height: \"100%\",\n          width: \"100%\",\n        }}\n      >\n        <Canvas\n          clearScreenAction={trigger}\n          brushSize={brushSize}\n          slateScreenType={slateType}\n        />\n        <Toolbar\n          changeSlateScreenType={changeSlateScreenType}\n          screenIcon={screenIcon}\n          brushSize={brushSize}\n          slateType={slateType}\n          setbrushSize={setbrushSize}\n          clearScreen={clearScreen}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default MainPage;\n","import React from \"react\";\nimport { SettingContext } from \"./context\";\ntype SettingProviderProps = {\n  initialColor?: string;\n};\nconst SettingProvider: React.FC<SettingProviderProps> = ({\n  initialColor,\n  children,\n}) => {\n  const [brushColor, setBrushColor] = React.useState(\"#0d6efd\");\n  return (\n    <SettingContext.Provider value={{ brushColor, setBrushColor }}>\n      {children}\n    </SettingContext.Provider>\n  );\n};\n\nexport default SettingProvider;\n","import React, { Suspense } from \"react\";\nimport \"./App.css\";\nimport DataProvider from \"./components/DataProvider\";\nimport LockProvider from \"./components/LockProvider\";\nimport MainPage from \"./components/MainPage\";\nimport SettingProvider from \"./components/SettingProvider\";\n\nfunction App() {\n  return (\n    <>\n      <Suspense fallback={null}>\n        <LockProvider>\n          <DataProvider>\n            <SettingProvider>\n              <MainPage />\n            </SettingProvider>\n          </DataProvider>\n        </LockProvider>\n      </Suspense>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n// Put any other imports below so that CSS from your\n// components takes precedence over default styles.\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}